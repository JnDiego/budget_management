{"version":3,"sources":["components/Error.js","components/Question.js","components/Form.js","components/Expense.js","components/List.js","helpers.js","components/BudgetControl.js","App.js","serviceWorker.js","index.js"],"names":["Error","message","className","Question","setBudget","setRemainingBudget","updateQuestion","useState","amount","setAmount","error","setError","state","action","onSubmit","event","preventDefault","isNaN","type","placeholder","onChange","parseInt","target","value","Form","setExpense","setCreateExpense","expenseName","setExpenseName","expenseAmount","setExpenseAmount","trim","expense","name","id","shortid","generate","htmlFor","Expense","List","expenses","map","key","reviewBudget","budget","remaining","BudgetControl","remainingBudget","App","showQuestion","setExpenses","createExpense","useEffect","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.9be03d76.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Error = ({ message }) => <p className=\"alert alert-danger error\">{`There was an error: ${message}.`}</p>;\n\nError.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Error;\n","import React, { Fragment, useState } from 'react';\nimport Error from './Error';\nimport PropTypes from 'prop-types';\n\nconst Question = ({ setBudget, setRemainingBudget, updateQuestion }) => {\n  //Definir el state\n  const [amount, setAmount] = useState(0);\n\n  //Objeto de error\n  const [error, setError] = useState({});\n\n  // Función que lee el presupuesto\n  const defineBudget = (event) => {\n    setAmount(parseInt(event.target.value, 10));\n  };\n\n  // Submit para definir el presupuesto\n  const addBudget = (event) => {\n    event.preventDefault();\n\n    // Validar\n    if (amount < 1) {\n      setError({ message: 'Budget must be greater than 0', state: true });\n      return;\n    } else if (isNaN(amount)) {\n      setError({ message: 'No budget has been entered', state: true });\n      return;\n    }\n\n    // Si se pasa la validación\n    setError({ message: '', state: false });\n    setBudget(amount);\n    setRemainingBudget(amount);\n    updateQuestion(false);\n  };\n\n  return (\n    <Fragment>\n      <h2>Enter your budget</h2>\n\n      {error.state ? <Error message={error.message} /> : null}\n\n      <form action=\"\" onSubmit={addBudget}>\n        <input type=\"number\" className=\"u-full-width\" placeholder=\"Enter your budget\" onChange={defineBudget} />\n\n        <input type=\"submit\" value=\"Define budget\" className=\"button-primary u-full-width\" />\n      </form>\n    </Fragment>\n  );\n};\n\nQuestion.propTypes = {\n  setBudget: PropTypes.func.isRequired,\n  setRemainingBudget: PropTypes.func.isRequired,\n  updateQuestion: PropTypes.func.isRequired,\n};\n\nexport default Question;\n","import React, { useState } from 'react';\nimport Error from './Error';\nimport shortid from 'shortid';\nimport PropTypes from 'prop-types';\n\nconst Form = ({ setExpense, setCreateExpense }) => {\n  //State para nombre del gasto\n  const [expenseName, setExpenseName] = useState('');\n\n  //State para cantidad del gasto\n  const [expenseAmount, setExpenseAmount] = useState(0);\n\n  //Objeto de error\n  const [error, setError] = useState({});\n\n  //Cuando el usuario agrega un gasto\n  const setNewExpense = (event) => {\n    event.preventDefault();\n\n    //Validar\n    if (expenseAmount < 1) {\n      setError({ message: 'Budget must be greater than 0', state: true });\n      return;\n    } else if (isNaN(expenseAmount)) {\n      setError({ message: 'No budget has been entered', state: true });\n      return;\n    } else if (expenseName.trim() === '') {\n      setError({ message: 'No name added for expense', state: true });\n      return;\n    }\n\n    // Construir gasto\n    const expense = {\n      name: expenseName,\n      amount: expenseAmount,\n      id: shortid.generate(),\n    };\n\n    // Pasar el gasto al componente principal\n    setExpense(expense);\n    setCreateExpense(true);\n\n    // Resetear el form\n    setExpenseName('');\n    setExpenseAmount(0);\n  };\n\n  return (\n    <form action=\"\" onSubmit={setNewExpense}>\n      <h2>Add your expenses here...</h2>\n      {error.state ? <Error message={error.message} /> : null}\n      <div className=\"campo\">\n        <label htmlFor=\"expenseName\">Expense Name</label>\n        <input\n          type=\"text\"\n          className=\"u-full-width\"\n          placeholder=\"E.g. Transport\"\n          name=\"expenseName\"\n          id=\"expenseName\"\n          value={expenseName}\n          onChange={(event) => setExpenseName(event.target.value)}\n        />\n      </div>\n      <div className=\"campo\">\n        <label htmlFor=\"expenseAmount\">Expense Amount</label>\n        <input\n          type=\"number\"\n          className=\"u-full-width\"\n          placeholder=\"E.g. 300\"\n          name=\"expenseAmount\"\n          id=\"expenseAmount\"\n          value={expenseAmount}\n          onChange={(event) => setExpenseAmount(parseInt(event.target.value, 10))}\n        />\n      </div>\n\n      <input type=\"submit\" className=\"button-primary u-full-width\" value=\"Add Expense\" />\n    </form>\n  );\n};\n\nForm.propTypes = {\n  setExpense: PropTypes.func.isRequired,\n  setCreateExpense: PropTypes.func.isRequired,\n};\n\nexport default Form;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Expense = ({ expense }) => (\n  <li className=\"gastos\">\n    <p>\n      {expense.name}\n      <span className=\"gasto\">$ {expense.amount}</span>\n    </p>\n  </li>\n);\n\nExpense.propTypes = {\n  expense: PropTypes.object.isRequired,\n};\n\nexport default Expense;\n","import React from 'react';\nimport Expense from './Expense';\nimport PropTypes from 'prop-types';\n\nconst List = ({ expenses }) => (\n  <div className=\"gastos-realizados\">\n    <h2>Expenses List</h2>\n    {expenses.map((expense) => (\n      <Expense key={expense.id} expense={expense} />\n    ))}\n  </div>\n);\n\nList.propTypes = {\n  expenses: PropTypes.array.isRequired,\n};\n\nexport default List;\n","export const reviewBudget = (budget, remaining) => {\n  let typeBudget;\n  // 25%\n  if (budget / 4 > remaining) {\n    typeBudget = 'alert alert-danger';\n  }\n  // 50%\n  else if (budget / 2 > remaining) {\n    typeBudget = 'alert alert-warning';\n  } else {\n    typeBudget = 'alert alert-success';\n  }\n\n  return typeBudget;\n};\n","import React, { Fragment } from 'react';\nimport { reviewBudget } from '../helpers';\nimport PropTypes from 'prop-types';\n\nconst BudgetControl = ({ budget, remainingBudget }) => {\n  return (\n    <Fragment>\n      <div className=\"alert alert-primary\">Budget: $ {budget}</div>\n      <div className={reviewBudget(budget, remainingBudget)}>Remaining: $ {remainingBudget}</div>\n    </Fragment>\n  );\n};\n\nBudgetControl.propTypes = {\n  budget: PropTypes.number.isRequired,\n  remainingBudget: PropTypes.number.isRequired,\n};\n\nexport default BudgetControl;\n","import React, { useState, useEffect } from 'react';\nimport Question from './components/Question';\nimport Form from './components/Form';\nimport List from './components/List';\nimport BudgetControl from './components/BudgetControl';\n\nfunction App() {\n  // Definir el state\n  const [budget, setBudget] = useState(0);\n  const [remainingBudget, setRemainingBudget] = useState(0);\n  const [showQuestion, updateQuestion] = useState(true);\n  const [expenses, setExpenses] = useState([]);\n  const [expense, setExpense] = useState({});\n  const [createExpense, setCreateExpense] = useState(false);\n\n  //UseEffect que actualiza el restante\n  useEffect(() => {\n    if (createExpense) {\n      //Agrega nuevo presupuesto\n      setExpenses([...expenses, expense]);\n      //Resta del presupuesto actual\n      const remaining = remainingBudget - expense.amount;\n      setRemainingBudget(remaining);\n      //Reseteo a false\n      setCreateExpense(false);\n    }\n  }, [createExpense, expense, expenses, remainingBudget]);\n\n  return (\n    <div className=\"container\">\n      <header>\n        <h1>Weekly Expense</h1>\n        <div className=\"contenido-principal contenido\">\n          {showQuestion ? (\n            <Question setBudget={setBudget} setRemainingBudget={setRemainingBudget} updateQuestion={updateQuestion} />\n          ) : (\n            <div className=\"row\">\n              <div className=\"one-half column\">\n                <Form setExpense={setExpense} setCreateExpense={setCreateExpense} />\n              </div>\n              <div className=\"one-half column\">\n                <List expenses={expenses} />\n                <BudgetControl budget={budget} remainingBudget={remainingBudget} />\n              </div>\n            </div>\n          )}\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}